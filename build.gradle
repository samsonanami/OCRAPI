plugins {
    id "com.gradle.build-scan" version "1.2"
    id "net.vivin.gradle-semantic-build-versioning" version "2.0.2"
    id "com.selesse.git.changelog" version "0.3.0"
    id "com.palantir.jacoco-coverage" version "0.4.0"
}
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}
group = "com.fintech.oracle"
apply plugin: "idea"
apply plugin: 'com.selesse.git.changelog'
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'com.palantir.jacoco-full-report'
allprojects {
    group = "com.fintech.orion"
    apply plugin: "idea"
    apply plugin: 'java'
    apply plugin: 'net.vivin.gradle-semantic-build-versioning'
    apply plugin: "jacoco"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    project.version.with {
        snapshotSuffix  = "-"
        preRelease {
            startingVersion = "0.0.0"
            bump { String version ->
                int firstNum = Integer.parseInt(version.split(/\./)[0])
                int secondNum = Integer.parseInt(version.split(/\./)[1])
                int thirdNum = Integer.parseInt(version.split(/\./)[2])
                if(thirdNum > 9){
                    thirdNum = 0
                    secondNum = secondNum + 1
                }else{
                    thirdNum = thirdNum + 1
                }
                return "${firstNum}.${secondNum}.${thirdNum}"
            }
        }

    }

    jacoco {
        toolVersion = "0.7.6.201602180812"
        reportsDir = file("$buildDir")
    }

}



changelog {
    // The title appears at the top of the changelog.
    // Default value: the name of the project.
    title = "${project.name} - Changelog"

    // The output directory where the report is generated.
    // Default value: main resource directory, or the "build" directory
    outputDirectory = file("$projectDir")

    // The name of the report to generate.
    // Default value: CHANGELOG.md
    fileName = "changelog.md"

    // The range of commits the changelog should be composed of.
    // Default value: 'beginning' (i.e. full changelog)
    // Possible values: 'beginning', 'last_tag', 'xxx'
    //
    // 'last_tag' will use all the commits since the last tag,
    // 'beginning' will use all commits since the initial commit (default)
    // 'xxx' will use all the tags since the 'xxx' Git reference (i.e. `since = 1.2.0` will display the changelog
    //       since the 1.2.0 tag, excluding 1.2.0)
    since = '1.0.0'

    // The output formats that should be generated.
    // Default value: ['markdown']
    // Possible values: 'html', 'markdown'.
    formats = ['html', 'markdown']


    // The Git "pretty" changelog commit format.
    // Default value: %ad%x09%s (%an), which produces:
    // Thu May 7 20:10:33 2015 -0400    Initial commit (Alex Selesse)
    commitFormat = '(%ai%x09) %s%n %b%n (%an)(%aE)'

    // Specifies a commit format for Markdown.
    // Default value: '* %s (%an)', which produces:
    // * Initial commit (Alex Selesse)
    markdown {
        commitFormat = '(%ai%x09) %s%n %b%n (%an)(%aE)'
    }

    // Specifies a commit format for the HTML template.
    // Default value: see commitFormat
    html {
        commitFormat = '(%ai%x09) %s%n %b%n (%an)(%aE)'
        //commitFormat = 'fuller EOC%n'

        // The Groovy HTML template used to generate the HTML changelog.
        // See http://docs.groovy-lang.org/latest/html/documentation/template-engines.html
        template = file("$projectDir/changelog-html-template").text
    }

    // A closure that returns 'true' if the line should be included in the changelog.
    // Default value: accept everything, { true }
    /*includeLines = {
        !it.contains("Merge")
    }*/

    // A closure that transforms a changelog String.
    // Default value: the identity closure, { it }
    //
    // For example, to remove '[ci skip]' from the changelog messages:
    processLines = {
        String input = it as String
        if (input.contains('[ci skip] ')) {
            input = input.minus('[ci skip] ')
        }
        input
    }
}

subprojects {



    repositories {
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://repository.jboss.com" }
        maven { url "http://download.java.net/maven/2/" }
        maven { url "http://repository.springsource.com/maven/bundles/external" }
        maven { url "http://forplay.googlecode.com/svn/mavenrepo" }
        mavenLocal()
    }

}